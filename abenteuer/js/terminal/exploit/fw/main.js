// VERLAUF
let pastCommands = [];
let timesPressedUp = 0;

// Event-Listener
document.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
        timesPressedUp = 0;
        addComment();
        document.querySelector(".comment-div").scrollIntoView();
    } else if (e.key === "ArrowUp") {
        if (pastCommands.length > timesPressedUp) timesPressedUp++;
        let lastCommand = pastCommands[pastCommands.length - timesPressedUp];
        document.querySelector(".user-command").value = lastCommand || "";
    } else if (e.key === "ArrowDown") {
        if (timesPressedUp > 0) timesPressedUp--;
        let lastCommand = pastCommands[pastCommands.length - timesPressedUp];
        document.querySelector(".user-command").value = lastCommand || "";
    } else if (e.key === "Tab") {
        e.preventDefault();
        let input = document.querySelector(".user-command").value;
        let dict = Object.keys(rootCmds);
        if (input !== "") {
            dict.forEach((cmd) => {
                if (cmd.startsWith(input)) {
                    document.querySelector(".user-command").value = cmd;
                }
            });
        }
    }
});

export let commentsDiv = document.querySelector(".comments");

let rootCmds = {
    "neofetch": `<div>Systeminfo wird angezeigt...</div>`,
};

let mainCmds = ["clear", "ls", "help", "novapwner"];
let allCmds = [...mainCmds, ...Object.keys(rootCmds)];

let userCommandDiv = document.querySelector(".user-command");
userCommandDiv.addEventListener("focus", (e) => e.preventDefault());

function addComment() {
    let newComment = document.createElement("div");
    newComment.classList.add("user-comment");

    let userCommand = userCommandDiv.value.trim();
    if (userCommand === "") {
        commentsDiv.innerHTML += `<div>Bitte gib einen Befehl ein.</div>`;
        return;
    }

    pastCommands.push(userCommand);
    newComment.innerText = `> ${userCommand}`;
    commentsDiv.appendChild(newComment);

    if (allCmds.includes(userCommand)) {
        if (userCommand === "clear") {
            commentsDiv.innerHTML = "";
        } else if (userCommand === "help") {
            let cmds = [...Object.keys(rootCmds), ...mainCmds];
            commentsDiv.innerHTML += `<ul>${cmds.map((c) => `<li>${c}</li>`).join("")}</ul>`;
        } else if (userCommand === "ls") {
            commentsDiv.innerHTML += `<div>${Object.keys(rootCmds).map((c) => `<div>${c}</div>`).join("")}</div>`;
        } else if (userCommand === "novapwner") {
            let success = Math.random() < 0.95; // 95% Erfolgschance
            if (success) {
                commentsDiv.innerHTML += `<div><pre>
[2025-09-18 22:20:41] target: IP_ADDR:8443 — aggressive exploit simulation started
[2025-09-18 22:20:43] flood -> management API (simulated) ... retrying
[2025-09-18 22:20:46] remote: unusual pattern detected
[2025-09-18 22:20:47] NovaSentinel: ALERT -> "Anomalous management access pattern (priority HIGH)"
[2025-09-18 22:20:47] mitigation: temporary admin lock, connection throttled
[2025-09-18 22:20:49] exploit: partial success — read-only snapshot obtained, write attempts blocked
[2025-09-18 22:20:50] extraction: saved /tmp/nova_fw_snapshot_partial.mock
[2025-09-18 22:20:51] NETWORK DEFENSE: active trace escalation
</pre><br><h3><a href="./decrypt_files.html">Klicke hier, um fortzufahren</a></h3></div>`;
            } else {
             commentsDiv.innerHTML += `<div><pre>
[story-john] incremental stress test mode
Loaded 5 hashes (mysql-sha1)
[00:04:55] guesses: 10.9M  c/s: 37k  trying: "aaaa" -> "pass1234"

[00:04:56] ALERT from NovaSentinel -> "Brute-force pattern detected against 204.101.183.164:3306"
IDS action: temporary throttle + source flagging
Network interruption — remote closed connection.

RESULT: Keine Passwörter gebrochen.

</pre><h3><a href="./trap_detected.html">Klicke hier, um fortzufahren</a></h3></div>`   
            }
            
        } else if (rootCmds[userCommand]) {
            commentsDiv.innerHTML += rootCmds[userCommand];
        }
    } else {
        handleInvalidCommand(userCommand);
    }

    userCommandDiv.value = "";
}

function handleInvalidCommand(cmd) {
    commentsDiv.innerHTML += `<div>Der Befehl <span class="green">'${cmd}'</span> wurde nicht erkannt. Tippe <span class="red">help</span> für eine Liste möglicher Befehle.</div>`;
}
